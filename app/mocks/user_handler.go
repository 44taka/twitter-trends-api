// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/handler/user.go

// Package mock_handler is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserHandler) Create(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx)
}

// Create indicates an expected call of Create.
func (mr *MockUserHandlerMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserHandler)(nil).Create), ctx)
}

// Delete mocks base method.
func (m *MockUserHandler) Delete(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx)
}

// Delete indicates an expected call of Delete.
func (mr *MockUserHandlerMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserHandler)(nil).Delete), ctx)
}

// FindAll mocks base method.
func (m *MockUserHandler) FindAll(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindAll", ctx)
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserHandlerMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserHandler)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockUserHandler) FindById(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindById", ctx)
}

// FindById indicates an expected call of FindById.
func (mr *MockUserHandlerMockRecorder) FindById(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserHandler)(nil).FindById), ctx)
}

// Update mocks base method.
func (m *MockUserHandler) Update(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", ctx)
}

// Update indicates an expected call of Update.
func (mr *MockUserHandlerMockRecorder) Update(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserHandler)(nil).Update), ctx)
}
